
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def __init__(self):
        self.map = {}
        self.minPos=0
        self.maxPos=0
    def traverse(self,root,pos,hgt):
        if root:
            
            # checking whether current position already exits in map
            if pos in self.map:

                #checking wheather given position contains provided height as a key 
                if hgt not in self.map[pos]:
                    self.map[pos][hgt]=[root.val,]
                else:
                    self.map[pos][hgt].append(root.val)
    
            else :
                self.map[pos]= {}
                self.map[pos][hgt]=[root.val,]
            self.minPos = min(self.minPos,pos)
            self.maxPos=max(pos,self.maxPos)
            self.traverse(root.left,pos-1,hgt+1)
               
            self.traverse(root.right,pos+1,hgt+1)
                
          
    def verticalTraversal(self, root: Optional[TreeNode]) -> List[List[int]]:
        self.traverse(root,0,0)
        res=[]
        print(self.map)
        # iterating through positions (x axis)
        for i in range(self.minPos,self.maxPos+1):
            temp=[]
            self.map[i] = dict(sorted(self.map[i].items()))

            # iterating through heights (y axis) -- for each single x axis value
            for j in self.map[i]:
                if len(self.map[i][j])>1:
                    self.map[i][j].sort()
                temp+=self.map[i][j]
            res.append(temp)
        return res
