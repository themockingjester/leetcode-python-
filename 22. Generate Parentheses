# Brute force

class Solution:
    def isValid(self, s: str) -> bool:
        i=0
        stack=[]
        while i < len(s):
            if(s[i]=="(" or s[i]=="{" or s[i]=="["):
                stack.append(s[i])
            else:
                if(s[i]==")" and len(stack)>0 and stack[-1]=="("):
                    stack.pop()
                elif(s[i]=="}" and len(stack)>0 and stack[-1]=="{"):
                    stack.pop()
                elif(s[i]=="]" and len(stack)>0 and stack[-1]=="["):
                    stack.pop()
                else:
                    stack.append(s[i])
            i+=1
        if(len(stack)==0):
            return True
        return False
    def __init__(self):
        self.allPossibilities={}
    def generatePossibilities(self,n,parentheses,pattern,openBrackets,closeBrackets):
        if(closeBrackets>n or openBrackets>n):
            return
        if(pattern not in self.allPossibilities and len(pattern)==2*n):
            self.allPossibilities[pattern]=True
        if(len(pattern)>= 2*n):
            return
        
        
        self.generatePossibilities(n,parentheses,pattern+p],openBrackets+1,closeBrackets)

        self.generatePossibilities(n,parentheses,pattern+parentheses[1],openBrackets,closeBrackets+1)


    def generateParenthesis(self, n: int) -> List[str]:
        parentheses=['(',')']
        self.generatePossibilities(n,parentheses,'',0,0)
        final=[]
        print(self.allPossibilities)
        for key in self.allPossibilities.keys():
            if(self.isValid(key)):
                final.append(key)
        return final
